# bot.py ‚Äî –ë–æ—Ç –¥–ª—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –∫–ª—É–±–∞

import json
import os
from datetime import datetime, timedelta
from datetime import time as Time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import logging
import re
import pytz  # pip install pytz

TOKEN = os.getenv("TOKEN")
DATA_FILE = "data/stats.json"
GROUP_CHAT_ID = -1002906845038  # ID –≥—Ä—É–ø–ø—ã

THREAD_INPUT = 4      # –¢–µ–º–∞ "–°–∫–æ–ª—å–∫–æ –Ω–∞–ø–∏—Å–∞–ª"
THREAD_OUTPUT = 5     # –¢–µ–º–∞ "–û—Ç—á—ë—Ç—ã"

WEEKLY_REPORT_HOUR = 10
MONTHLY_REPORT_HOUR = 10
REMINDER_HOUR = 20  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 20:00

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
user_states = {}  # user_id ‚Üí { stage, timer_job, message_id }

# --- –≠—Ç–∞–ø—ã ---
STATE_WAITING_FOR_COUNT = "waiting_for_count"

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ---
async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    if chat_id > 0:  # –õ–°
        return False
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        return member.status in ("administrator", "creator")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞: {e}")
        return False

# --- –ö–æ–º–∞–Ω–¥–∞ /report ‚Äî –∫–Ω–æ–ø–∫–∏ –≤ —Ç–µ–º–µ "–û—Ç—á—ë—Ç—ã" ---
async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    thread_id = update.message.message_thread_id

    if chat_id != GROUP_CHAT_ID or thread_id != THREAD_INPUT:
        await update.message.reply_text(
            "‚ùó –ö–æ–º–∞–Ω–¥—É /report –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–µ *¬´–°–∫–æ–ª—å–∫–æ –Ω–∞–ø–∏—Å–∞–ª¬ª*.",
            parse_mode="Markdown"
        )
        return

    keyboard = [
        [InlineKeyboardButton("üíú –¢—Ä–µ–≤–æ–∂–∏–ª–∞—Å—å/–≥—Ä—É—Å—Ç–∏–ª–∞", callback_data="mood_purple")],
        [InlineKeyboardButton("üíô –û—Ç–¥—ã—Ö–∞–ª–∞", callback_data="mood_blue")],
        [InlineKeyboardButton("üíõ –ú–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–∞–ª–∞", callback_data="mood_yellow")],
        [InlineKeyboardButton("üíö –†–∞–±–æ—Ç–∞–ª–∞ —Å —Ç–µ–∫—Å—Ç–æ–º", callback_data="mood_green")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ö–∞–∫ –ø—Ä–æ—à—ë–ª –≤–∞—à –¥–µ–Ω—å?", reply_markup=reply_markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    username = query.from_user.full_name or query.from_user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = query.message.chat_id
    thread_id = query.message.message_thread_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º: —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–µ "–û—Ç—á—ë—Ç—ã"
    if chat_id != GROUP_CHAT_ID or thread_id != THREAD_INPUT:
        await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∑–¥–µ—Å—å.")
        return

    mood_map = {
        "mood_purple": ("üíú", "—Ç—Ä–µ–≤–æ–∂–∏–ª–∞—Å—å/–≥—Ä—É—Å—Ç–∏–ª–∞"),
        "mood_blue": ("üíô", "–æ—Ç–¥—ã—Ö–∞–ª–∞"),
        "mood_yellow": ("üíõ", "–º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–∞–ª–∞"),
        "mood_green": ("üíö", "—Ä–∞–±–æ—Ç–∞–ª–∞ —Å —Ç–µ–∫—Å—Ç–æ–º")
    }

    if query.data in mood_map:
        emoji, desc = mood_map[query.data]
        today = datetime.now().strftime("%Y-%m-%d")
        stats = load_stats()
        user_key = str(user_id)

        if user_key not in stats:
            stats[user_key] = {"name": username, "entries": {}, "moods": {}}
        stats[user_key]["name"] = username
        stats[user_key]["moods"][today] = query.data.split("_")[1]  # purple/blue/yellow/green
        save_stats(stats)

        if query.data == "mood_green":
            user_states[user_id] = {"stage": STATE_WAITING_FOR_COUNT}

            sent = await query.edit_message_text("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2500, 5,3–∫):")
            user_states[user_id]["message_id"] = sent.message_id

            job = context.job_queue.run_once(
                timeout_handler,
                when=300,
                data={"user_id": user_id, "username": username}
            )
            user_states[user_id]["timer_job"] = job
        else:
            await query.edit_message_text(f"‚úÖ –í—ã –æ—Ç–º–µ—Ç–∏–ª–∏: {emoji} –°–µ–≥–æ–¥–Ω—è –≤—ã {desc}\n–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç—å! üíñ")

    elif query.data in ["stats_week", "stats_month"]:
        stats = load_stats()
        if str(user_id) not in stats:
            await query.edit_message_text("‚ùå –í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ—Ç—á—ë—Ç—ã.")
            return

        user_data = stats[str(user_id)]
        entries = user_data["entries"]
        now = datetime.now()
        period_ago = now - (timedelta(days=7) if query.data == "stats_week" else timedelta(days=30))
        title = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é" if query.data == "stats_week" else "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"

        total = sum(count for d, count in entries.items() if datetime.strptime(d, "%Y-%m-%d") >= period_ago)
        days = sum(1 for d in entries if datetime.strptime(d, "%Y-%m-%d") >= period_ago)
        avg = total // days if days else 0

        result = (
            f"üë§ *{username}*\n{title}\n\n"
            f"üñã –ù–∞–ø–∏—Å–∞–Ω–æ: *{total:,}* –∑–Ω.\n"
            f"üìÖ –î–Ω–µ–π: *{days}*\n"
            f"üéØ –°—Ä–µ–¥–Ω–µ–µ: *{avg:,}* –∑–Ω./–¥–µ–Ω—å"
        )

        try:
            await context.bot.send_message(user_id, result, parse_mode="Markdown")
            await query.edit_message_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–°!")
        except:
            await query.edit_message_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É: @Sterladometr_bot")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week"),
            InlineKeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="stats_month")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
        reply_markup=reply_markup
    )

# --- –¢–∞–π–º–∞—É—Ç –≤–≤–æ–¥–∞ ---
async def timeout_handler(context: ContextTypes.DEFAULT_TYPE):
    user_id = context.job.data["user_id"]
    username = context.job.data["username"]

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ ‚Äî –∑–Ω–∞—á–∏—Ç, –≤–≤–æ–¥ –±—ã–ª —Å–¥–µ–ª–∞–Ω
    if user_id not in user_states:
        return  # –£–∂–µ –≤–≤–µ–ª–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    del user_states[user_id]

    today = datetime.now().strftime("%Y-%m-%d")
    stats = load_stats()
    user_key = str(user_id)

    if user_key not in stats:
        stats[user_key] = {"name": username, "entries": {}, "moods": {}}

    # ‚úÖ –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    if today not in stats[user_key]["entries"]:
        stats[user_key]["entries"][today] = 100
        save_stats(stats)
        logger.info(f"–¢–∞–π–º–∞—É—Ç: {username} –ø–æ–ª—É—á–∏–ª 100 —Å–∏–º–≤–æ–ª–æ–≤")

    try:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚è∞ –ü—Ä–æ—à–ª–æ 5 –º–∏–Ω—É—Ç –±–µ–∑ –æ—Ç–≤–µ—Ç–∞. –í–∞–º –∑–∞—Å—á–∏—Ç–∞–Ω–æ *100 —Å–∏–º–≤–æ–ª–æ–≤* –∑–∞ –¥–µ–Ω—å.",
            parse_mode="Markdown"
        )
    except:
        pass

# --- –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    chat_id = update.effective_chat.id
    thread_id = update.message.message_thread_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–º—ã "–°–∫–æ–ª—å–∫–æ –Ω–∞–ø–∏—Å–∞–ª"
    if chat_id != GROUP_CHAT_ID or thread_id != THREAD_INPUT:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    if user_id not in user_states or user_states[user_id].get("stage") != STATE_WAITING_FOR_COUNT:
        return

    job = user_states[user_id].get("timer_job")
    if job:
        job.schedule_removal()

    count = parse_number(text)
    if count is None:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä—ã: 2500, 5,3–∫, 2.7k, 1.5 —Ç—ã—Å.")
        return

    today = datetime.now().strftime("%Y-%m-%d")
    stats = load_stats()
    username = update.effective_user.full_name or f"User_{user_id}"
    user_key = str(user_id)

    if user_key not in stats:
        stats[user_key] = {"name": username, "entries": {}, "moods": {}}
    stats[user_key]["name"] = username
    stats[user_key]["entries"][today] = count  # ‚úÖ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
    save_stats(stats)

    action = "–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–æ" if today in stats[user_key]["entries"] else "–∑–∞—Å—á–∏—Ç–∞–Ω–æ"
    await update.message.reply_text(f"‚úÖ {action}: *{count:,}* —Å–∏–º–≤–æ–ª–æ–≤!", parse_mode="Markdown")

    if user_id in user_states:
        del user_states[user_id]

# --- –ü–∞—Ä—Å–µ—Ä —á–∏—Å–µ–ª ---
def parse_number(text: str) -> int | None:
    text = text.replace(' ', '').replace(',', '.')
    match = re.match(r'(\d+\.?\d*)\s*([–∫k]|—Ç—ã—Å\.?)?$', text.lower())
    if not match:
        return None
    number = float(match.group(1))
    suffix = match.group(2)
    if suffix in ['–∫', 'k', '—Ç—ã—Å.']:
        number *= 1000
    return int(number)

# --- –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ---
def load_stats():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        for user in data.values():
            if "moods" not in user:
                user["moods"] = {}
        return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        return {}

def save_stats(stats):
    os.makedirs("data", exist_ok=True)
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)

# --- –û—Ç—á—ë—Ç—ã ---
def generate_report(stats, start_date, end_date, title):
    lines = [f"{title} ({start_date} ‚Äì {end_date})"]
    total_chars = 0
    user_data_list = []

    for user_id, user_data in stats.items():
        name = user_data["name"]
        chars = sum(c for d, c in user_data["entries"].items() if start_date <= d <= end_date)
        green = sum(1 for d, m in user_data["moods"].items() if start_date <= d <= end_date and m == "green")
        blue = sum(1 for d, m in user_data["moods"].items() if start_date <= d <= end_date and m == "blue")
        yellow = sum(1 for d, m in user_data["moods"].items() if start_date <= d <= end_date and m == "yellow")
        purple = sum(1 for d, m in user_data["moods"].items() if start_date <= d <= end_date and m == "purple")

        if any([chars, green, blue, yellow, purple]):
            user_data_list.append({
                "name": name, "chars": chars, "g": green, "b": blue, "y": yellow, "p": purple
            })
            total_chars += chars

    user_data_list.sort(key=lambda x: x["chars"], reverse=True)

    for u in user_data_list:
        line = f"‚Ä¢ {u['name']}: {u['chars']:,} –∑–Ω."
        moods = []
        if u['g'] > 0: moods.append(f"üíö{u['g']}")
        if u['b'] > 0: moods.append(f"üíô{u['b']}")
        if u['y'] > 0: moods.append(f"üíõ{u['y']}")
        if u['p'] > 0: moods.append(f"üíú{u['p']}")
        if moods:
            line += " (" + " ".join(moods) + ")"
        lines.append(line)

    lines.append(f"\n–í—Å–µ–≥–æ: *{total_chars:,}* –∑–Ω.")
    return "\n".join(lines)

def generate_weekly_report(stats):
    week_ago = datetime.now() - timedelta(days=7)
    start = week_ago.strftime("%Y-%m-%d")
    end = datetime.now().strftime("%Y-%m-%d")
    return generate_report(stats, start, end, "üìù *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç*")

def generate_monthly_report(stats):
    now = datetime.now()
    start = now.replace(day=1).strftime("%Y-%m-%d")
    end = now.strftime("%Y-%m-%d")
    return generate_report(stats, start, end, "üìÖ *–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç*")

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ ---
async def send_weekly_report(context: ContextTypes.DEFAULT_TYPE):
    report = generate_weekly_report(load_stats())
    await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        message_thread_id=THREAD_OUTPUT,
        text=report,
        parse_mode="Markdown"
    )

async def send_monthly_report(context: ContextTypes.DEFAULT_TYPE):
    report = generate_monthly_report(load_stats())
    await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        message_thread_id=THREAD_OUTPUT,
        text=report,
        parse_mode="Markdown"
    )

# --- –†—É—á–Ω–æ–π –≤—ã–∑–æ–≤ –æ—Ç—á—ë—Ç–∞ (–∞–¥–º–∏–Ω—ã) ---
async def send_weekly_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update, context):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    report = generate_weekly_report(load_stats())
    await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        message_thread_id=THREAD_OUTPUT,
        text=report,
        parse_mode="Markdown"
    )
    await update.message.reply_text("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ---
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        message_thread_id=THREAD_OUTPUT,
        text="üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Å–≤–æ–π –¥–µ–Ω—å —Å –ø–æ–º–æ—â—å—é /report!",
        parse_mode="Markdown"
    )

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def set_commands(application):
    await application.bot.set_my_commands([
        BotCommand("report", "–û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å"),
        BotCommand("stats", "–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("top", "–¢–û–ü –∞–≤—Ç–æ—Ä–æ–≤"),
        BotCommand("send_weekly", "–í—ã–∑–≤–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç (–∞–¥–º–∏–Ω—ã)"),
        BotCommand("help", "–ü–æ–º–æ—â—å")
    ])

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "‚Ä¢ `/report` ‚Äî –∫–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å\n"
        "‚Ä¢ `/stats` ‚Äî –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ `/top` ‚Äî —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        "üí° –ë–æ—Ç —Å–∞–º –∑–∞—Å—á–∏—Ç–∞–µ—Ç 100 —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –≤—ã –Ω–µ –≤–≤–µ–¥—ë—Ç–µ —á–∏—Å–ª–æ –∑–∞ 5 –º–∏–Ω—É—Ç."
    )
    await update.message.reply_text(text)

# --- –¢–û–ü ---
async def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update, context):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    stats = load_stats()
    now = datetime.now()
    week_ago = now - timedelta(days=7)
    start = week_ago.strftime("%Y-%m-%d")
    end = now.strftime("%Y-%m-%d")

    user_data = []
    for uid, data in stats.items():
        name = data["name"]
        chars = sum(c for d, c in data["entries"].items() if start <= d <= end)
        days = sum(1 for d in data["entries"] if start <= d <= end)
        if chars > 0:
            user_data.append((name, chars, days))

    user_data.sort(key=lambda x: x[1], reverse=True)
    lines = ["üèÜ *–¢–û–ü-5 –∑–∞ –Ω–µ–¥–µ–ª—é*"]
    for i, (name, chars, days) in enumerate(user_data[:5], 1):
        lines.append(f"{i}. {name} ‚Äî *{chars:,}* –∑–Ω. (*{days}* –¥–Ω.)")
    lines.append("\nüìå –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    await update.message.reply_text("\n".join(lines), parse_mode="Markdown")

# --- main ---
def main():
    app = Application.builder().token(TOKEN).build()

    if app.job_queue is None:
        logger.error("JobQueue –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
        return

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("report", report_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CommandHandler("top", top_command))
    app.add_handler(CommandHandler("send_weekly", send_weekly_now))
    app.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    app.job_queue.run_once(set_commands, when=2)

    # --- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ---
    moscow = pytz.timezone("Europe/Moscow")

    daily_time = Time(hour=REMINDER_HOUR, minute=0, second=0, tzinfo=moscow)
    weekly_time = Time(hour=WEEKLY_REPORT_HOUR, minute=0, second=0, tzinfo=moscow)
    monthly_time = Time(hour=MONTHLY_REPORT_HOUR, minute=0, second=0, tzinfo=moscow)

    app.job_queue.run_daily(daily_reminder, time=daily_time)
    app.job_queue.run_daily(send_weekly_report, time=weekly_time, days=(1,))  # ‚úÖ –í—Ç–æ—Ä–Ω–∏–∫
    app.job_queue.run_monthly(send_monthly_report, when=monthly_time, day=1)

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç...")
    app.run_polling()

if __name__ == "__main__":
    main()


